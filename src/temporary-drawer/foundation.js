import { MDCTemporaryDrawerFoundation } from '@material/drawer';

import adapterUtilities from '../adapter-utilities';

export default ({
  elementDrawer,
  elementRoot,
  onClose,
  onOpen,
  propClassNames,
  updateClassNames,
  updateCssVariables,
}) => {
  const {
    addBodyClass,
    addClass,
    deregisterInteractionHandler,
    deregisterInteractionHandlerAny,
    eventTargetHasClass,
    getDrawerWidth,
    getFocusableElements,
    hasClass,
    hasNecessaryDom,
    isDrawer,
    isRtl,
    makeElementUntabbable,
    notifyClose,
    notifyOpen,
    registerInteractionHandler,
    registerInteractionHandlerAny,
    removeBodyClass,
    removeClass,
    restoreElementTabState,
    saveElementTabState,
    setTranslateX,
    updateCssVariable,
  } = adapterUtilities();
  return new MDCTemporaryDrawerFoundation({
    addBodyClass: addBodyClass(document.body),
    addClass: addClass(updateClassNames),
    deregisterDocumentKeydownHandler: deregisterInteractionHandler(document, 'keydown'),
    deregisterDrawerInteractionHandler: deregisterInteractionHandlerAny(elementDrawer),
    deregisterInteractionHandler: deregisterInteractionHandlerAny(elementRoot),
    deregisterTransitionEndHandler: deregisterInteractionHandler(elementRoot, 'transitionend'),
    eventTargetHasClass: eventTargetHasClass(),
    getDrawerWidth: getDrawerWidth(elementDrawer),
    getFocusableElements: getFocusableElements(elementDrawer),
    hasClass: hasClass(propClassNames),
    hasNecessaryDom: hasNecessaryDom(elementDrawer),
    isDrawer: isDrawer(elementDrawer),
    isRtl: isRtl(),
    makeElementUntabbable: makeElementUntabbable(),
    notifyClose: notifyClose(onClose),
    notifyOpen: notifyOpen(onOpen),
    registerDocumentKeydownHandler: registerInteractionHandler(document, 'keydown'),
    registerDrawerInteractionHandler: registerInteractionHandlerAny(elementDrawer),
    registerInteractionHandler: registerInteractionHandlerAny(elementRoot),
    registerTransitionEndHandler: registerInteractionHandler(elementRoot, 'transitionend'),
    removeBodyClass: removeBodyClass(document.body),
    removeClass: removeClass(updateClassNames),
    restoreElementTabState: restoreElementTabState(),
    saveElementTabState: saveElementTabState(),
    setTranslateX: setTranslateX(elementDrawer),
    updateCssVariable: updateCssVariable(updateCssVariables),
  });
};
